name: Code checks

on:
  push:
    tags:
      - '**'
    paths-ignore:
      - '.github/**'
      - '.husky/**'
      - '.vscode/**'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      pkg_version: ${{ steps.pkg_version.outputs.pkg_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Determine package version
        id: pkg_version
        run: |
          pkg_version=$(node -p "require('./package.json').version")
          echo "Package version: $pkg_version"
          echo "pkg_version=$pkg_version" >> "$GITHUB_ENV"
          echo "pkg_version=$pkg_version" >> "$GITHUB_OUTPUT"

      - name: Check tag matches package version
        run: |
          tag=$(echo "${GITHUB_REF#refs/tags/}")
          if [ "$tag" != "v${pkg_version}" ]; then
            echo "Tag '$tag' does not match package version 'v${pkg_version}'"
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build
        env:
          CI: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          path: dist/

  upload-release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution

      - name: Zip artifacts
        run: |
          artifact_path="homebridge-alexa-smarthome.${{ needs.build.outputs.pkg_version }}.zip"
          echo "artifact_path=$artifact_path" >> "$GITHUB_ENV"
          zip -r "$artifact_path" dist/

      - name: Fetch release information
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ github.ref }}'.split('/').pop();
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            return {
              upload_url: release.data.upload_url,
              id: release.data.id,
            };

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./${{ env.artifact_path }}
          asset_name: ${{ env.artifact_path }}
          asset_content_type: application/zip
